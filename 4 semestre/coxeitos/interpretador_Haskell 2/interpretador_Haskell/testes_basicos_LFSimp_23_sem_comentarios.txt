(+ 1 2.3)    
(- 10 20)
(* (+ 1 2.3) (- 10 20))
(* (+ 1 2.3) (- 10 (~ 20)))
(+ (head (tail (cons 2 (cons 1 3)))) (call (lambda f (call f (~ 32))) (lambda x (- 200 x))))
(+ (head (tail (cons 2 (cons 1 3)))) (lambda f (call f (~ 32)))) 
(+ (head (tail (cons 2 (cons 1 3)))) (cons 2 3))                 

(cons 2 3)                         
(cons 2 (cons 1 3)))               
(cons 2 (tail (cons 10 (cons 1 3)))) 
(cons (+ 3 4) (call (lambda x (+ x 5)) 8))
(cons (+ 3 4) (lambda x (+ x 5)))
(cons (lambda x (+ x 5)) (+ 3 4))
(head (cons 2 3))                   
(tail (cons 2 (cons 1 3)))          
(head (tail (cons 2 (cons 1 3))))
(tail (tail (cons 2 (cons 1 3))))
(head (tail (cons 2 3)))                  
(tail (tail (cons 2 3)))                  
(tail (cons (+ 3 4) (lambda x (+ x 5))))  

(if 0 (+ 1 2) (+ 10 20))
(if 0.0 (+ 1 2) (+ 10 20))
(if 1 (+ 1 2) (+ 10 20))
(if 0 (+ 1 2) (% 50 10))
(if (+ 55 10) (+ 1 2) (+ 10 20))
(if (- 15 10) (+ 1 2) (+ 10 20))
(if (- 5 5) (+ 1 2) (+ 10 20))
(if (~ 1) (+ 1 2) (+ 10 20))
(if (let addnum (+ 12 13) (+ addnum 5)) (+ 1 2) (+ 10 20))
(if (let maisum (lambda x (+ x 1)) (call maisum 5)) (+ 1 2) (+ 10 20))
(if (let menosum (lambda x (- x 1)) (call menosum 5)) (+ 1 2) (+ 10 20))
(if (let menosum (lambda x (- x 1)) (call menosum 1)) (+ 1 2) (+ 10 20))
(if (if 1 (+ 1 2) (+ 10 20)) (+ 100 200) (+ 10 20))

(call (lambda x (+ x 5)) 8)                             
(call (lambda ma5ia (+ ma5ia 5)) 8)                     
(call (lambda ?ma5ia (+ ?ma5ia 5)) 8)                   
(call (lambda ? (+ ? 5)) 8)                             
(call (lambda + (+ + 5)) 8)                             
(call (lambda 2 (+ 2 5)) 8)                             
(call (lambda 2a (+ 2a 5)) 8)                           
(call (lambda f (call f (~ 32))) (lambda x (- 200 x)))  

(let um 1 (+ um 5))                             
(let ? 1 (+ ? 5))                               
(let ! 1 (+ ! 5))                               
(let 13 1 (+ 13 5))                             
(let if 1 (+ if 5))                             
(let + 1 (+ + 5))                               
(let ~ 1 (+ ~ 5))                               
(let addnum (+ 12 13) (+ addnum 5))             
(let maisum (lambda x (+ x 1)) (call maisum 5)) 
(letrec fatorial (lambda x (if x (* x (call fatorial (- x 1))) 1)) (call fatorial 5))

(quote 10)
(quote casa)




